--- mm/vmalloc.c
+++ mm/vmalloc.c
@@ -789,7 +789,7 @@
 	struct vmap_block *vb;
 	struct vmap_area *va;
 	unsigned long vb_idx;
-	int node, err, cpu;
+	int node, err;
 
 	node = numa_node_id();
 
@@ -828,13 +828,12 @@
 	BUG_ON(err);
 	radix_tree_preload_end();
 
-	cpu = get_cpu_light();
-	vbq = &__get_cpu_var(vmap_block_queue);
+	vbq = &get_cpu_var(vmap_block_queue);
 	vb->vbq = vbq;
 	spin_lock(&vbq->lock);
 	list_add_rcu(&vb->free_list, &vbq->free);
 	spin_unlock(&vbq->lock);
-	put_cpu_light();
+	put_cpu_var(vmap_block_queue);
 
 	return vb;
 }
@@ -915,7 +914,7 @@
 	struct vmap_block *vb;
 	unsigned long addr = 0;
 	unsigned int order;
-	int purge = 0, cpu;
+	int purge = 0;
 
 	BUG_ON(size & ~PAGE_MASK);
 	BUG_ON(size > PAGE_SIZE*VMAP_MAX_ALLOC);
@@ -923,8 +922,7 @@
 
 again:
 	rcu_read_lock();
-	cpu = get_cpu_light();
-	vbq = &__get_cpu_var(vmap_block_queue);
+	vbq = &get_cpu_var(vmap_block_queue);
 	list_for_each_entry_rcu(vb, &vbq->free, free_list) {
 		int i;
 
@@ -961,7 +959,7 @@
 	if (purge)
 		purge_fragmented_blocks_thiscpu();
 
-	put_cpu_light();
+	put_cpu_var(vmap_block_queue);
 	rcu_read_unlock();
 
 	if (!addr) {
